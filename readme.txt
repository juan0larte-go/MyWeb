Inicializar con Git üìå
 

Entrar a la terminal, buscamos la carpeta de nuestro proyecto y entramos a ese directorio con cd  
Dentro de la carpeta donde est√° el proyecto, se inicializa un control de versi√≥n:

git init
 
-------------------------------

Con el comando git status permite ver que archivos se han a√±adido, de esta forma se hace un seguimiento:

git status
 
-------------------------------

++Nota++: si en la salida dice que hay Untracked files, quiere decir que se tenia un archivo antes de crear el repositorio y hay que agregarlo.  
Para agregar archivos a stage con git add <file.extensi√≥n>:  
Por ejemplo si queremos agregar web.html:

git add web.html
 
-------------------------------
Cuando se quiera a√±adir todo sin especificar, se ejecuta:

git add .

-------------------------------
-------------------------------

Configurar Git localmente üìå
 

En la terminal ejecutar:

git config --global user.name [name]
//[en name colocar el nombre de usuario de GitHub], dar ENTER
git config --global user.email [email]
//[en email colocar el correo de GitHub], dar ENTER
 
-------------------------------

Si quieres comprobar tu configuraci√≥n, puedes usar un comando para mostrar todas las propiedades que Git ha configurado:

git config --list
 
-------------------------------
Hacer commit üìå
 

Los commits representan el cambio que se guarda en el repositorio de versiones, donde podemos regresar a versiones pasadas y modificarlas. Los commits se pueden considerar como instant√°neas o hitos a lo largo de la l√≠nea de tiempo de un proyecto de Git. Las confirmaciones se crean con el comando git commit para capturar el estado de un proyecto en ese momento. Las instant√°neas de Git siempre se env√≠an al repositorio local (fuente: aqu√≠).  
En la terminal en la ruta del proyecto, ejecutar: git commit -m "Message"   ‚ó¶ -m: especifica donde va el mensaje, ‚ó¶ "Message": va con comillas y por lo general es la descripci√≥n del commit. ‚ó¶ Por ejemplo:

git commit -m "Mi primer commit"
 
-------------------------------

Para ver los commit que se ha hecho:

git log
 
-------------------------------

Para subir los commit a GitHub, ir a la p√°gina GitHub ya iniciado sesi√≥n, en Profile dar donde dice Your repositories y luego en el bot√≥n verde New.  
Al configurar el repositorio, se coloca el nombre (se recomienda colocar el mismo que la carpeta que tenemos localmente).  
Se puede poner una descripci√≥n en la casilla de ‚ÄúDescription‚Äù.  
Se puede seleccionar si se quiere p√∫blico o privado.  
Tambi√©n existen otras casillas que dependiendo de la complejidad del proyecto se requiera configurar.  
Una vez configurado todo, se da en el bot√≥n verde Create repository.  
Una vez creado el repositorio, se copia la direcci√≥nn que sale en Quick setup.  
Vamos a la terminal se pone:

git remote add origin <url_que_copiaste>
 
-------------------------------

Para hacer una verificaci√≥n se hace:

git remote -v
 
-------------------------------

Hacer push üìå
 

El comando git push te permite subir los commits desde tu rama (branch) local en tu repositorio git local al repositorio remoto (fuente: aqu√≠).  
Por defecto, Git elige origin como remoto y tu rama actual como la rama a la que subir. Si tu rama actual es main, el comando git push suministrar√° los dos par√°metros por defecto, o si es master colocar master (fuente: aqu√≠).  
Por ejemplo poner en la terminal:

git push origin main
 
-------------------------------

++Nota++: cada vez que se realice un cambio en el projecto repetir todos los pasos anteriores desde git add hasta hacer el push.